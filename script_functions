#!/bin/sh
# Script functions
# These should all be removed from the environment when script finishes

if type msgDebug 2>/dev/null | grep -iq function; then
    msgDebug "script_functions already loaded in ${SHELL_PROFILE_DEF_SCRIPT_FUNCTIONS}\n"

    return 1
fi

. "${SHELL_PROFILE_PATH}/vars"

msgDebug() {
    case $- in
        *i*) [ $((${SHELL_PROFILE_DEBUG:-0})) -eq 1 ] && printf "${1}";;
        #*i*) [ $((${SHELL_PROFILE_DEBUG:-0})) -eq 1 ] && printf "$(indent)${1}";;
    esac
}

indent() {
    if [ "${1}" ]; then
        if [ "${1}" -lt 0 ] && [ ${SHELL_PROFILE_INDENT:-0} -lt 1 ]; then
            SHELL_PROFILE_INDENT=0
        else
            SHELL_PROFILE_INDENT=$((${SHELL_PROFILE_INDENT:-0} + $1))
        fi

        return
    fi

    printf %${SHELL_PROFILE_INDENT:-0}s | tr " " "\t"
}

resolveLink() {
  LINK=$('ls' -dl "${1}")
  echo "${LINK#*-> }"
}

addPath() {
    if [ -L "${1}" ]; then
        msgDebug "Resolving link ${1}...\n"
        P=$(resolveLink "${1}")
        msgDebug "Target is ${P}\n"
    else
        P="${1}"
    fi

    case ":${PATH}:" in
        *:"${P}":*)
            msgDebug "${P} already in path\n"
            ;;
        *)
            if [ "${2}" = "after" ]; then
                msgDebug "Appending ${P} to PATH\n"
                PATH=$PATH:$P
            else
                msgDebug "Prepending ${P} to PATH\n"
                PATH=$P:$PATH
            fi
            msgDebug "Current PATH=${PATH}\n"
    esac

}

addPaths() {
    for dir in $1; do
        if [ "${dir}" != "${dir#\#}" ]; then
            continue
        fi

        if [ -d "${dir}" ]; then
            addPath "${dir}" "${2}"
        else
            msgDebug "${dir} not found, skipping\n"
        fi
    done
}

lc() {
    # http://stackoverflow.com/a/8952274
    uppers=ABCDEFGHIJKLMNOPQRSTUVWXYZ
    lowers=abcdefghijklmnopqrstuvwxyz
    i=0

    while ([ $i -lt ${#1} ]); do
        CUR=${1:$i:1}
        case $uppers in
            *$CUR*)CUR=${uppers%$CUR*};OUTPUT="${OUTPUT}${lowers:${#CUR}:1}";;
            *)OUTPUT="${OUTPUT}$CUR";;
        esac

        i=$((i+1))
    done

    echo "${OUTPUT}"
}

uc() {
    # http://stackoverflow.com/a/8952274
    uppers=ABCDEFGHIJKLMNOPQRSTUVWXYZ
    lowers=abcdefghijklmnopqrstuvwxyz
    i=0

    while ([ $i -lt ${#1} ]); do
        CUR=${1:$i:1}
        case $lowers in
            *$CUR*)CUR=${lowers%$CUR*};OUTPUT="${OUTPUT}${uppers:${#CUR}:1}";;
            *)OUTPUT="${OUTPUT}$CUR";;
        esac

        i=$((i+1))
    done

    echo "${OUTPUT}"
}

getPlatform() {
    command -v uname >/dev/null 2>&1
    result=$?

    if [ $result ]; then
        platform=$(uname -s)
        platform=$(lc "${platform}")
    else
        platform="unknown"
    fi

    echo "${platform}"
}

setFlag() {
    msgDebug "SHELL_PROFILE_FLAGS=${SHELL_PROFILE_FLAGS:-0}. Setting flag ${1}. "
    SHELL_PROFILE_FLAGS=$((${SHELL_PROFILE_FLAGS:-0} | $1))
    msgDebug "Now ${SHELL_PROFILE_FLAGS}\n"
}

clearFlag() {
    msgDebug "Clearing flag ${1}. SHELL_PROFILE_FLAGS=${SHELL_PROFILE_FLAGS:-0}. "
    SHELL_PROFILE_FLAGS=$((${SHELL_PROFILE_FLAGS:-0} & ~$1))
    msgDebug "Now ${SHELL_PROFILE_FLAGS}\n"
}

hasFlag() {
    msgDebug "Checking flag ${1}. SHELL_PROFILE_FLAGS=${SHELL_PROFILE_FLAGS:-0}. "
    result=$((${SHELL_PROFILE_FLAGS:-0} & $1))

    if [ ${result} -eq ${1} ]; then
        msgDebug "hasFlag=TRUE\n"
        true
    else
        msgDebug "hasFlag=FALSE\n"
        false
    fi
}

cleanUpVars() {
    for var in $(set | egrep "^SHELL_PROFILE_"); do
        case "${var%%=*}" in
            "SHELL_PROFILE_FLAGS");;
            "SHELL_PROFILE_DEBUG");;
            *)
                msgDebug "Unsetting variable ${var%%=*}\n"
                unset -v "${var%%=*}"
                ;;
        esac
    done
}

loadLocalVars() {
    if [ -r "${SHELL_PROFILE_LOCAL_VAR_FILE}" ] && ! hasFlag $SHELL_PROFILE_FLAG_VARS_LOCAL_LOADED; then
        msgDebug "Loading local variables from ${SHELL_PROFILE_LOCAL_VAR_FILE}\n"
        grep -Ev '^($|#|\s+|SHELL_PROFILE_)' "${SHELL_PROFILE_LOCAL_VAR_FILE}" >/dev/null 2>&1
        result=$?

        if [ $result -eq 0 ]; then
            msgDebug "WARNING: Non SHELL_PROFILE variables found in ${SHELL_PROFILE_LOCAL_VAR_FILE}\n"
        fi

        . "${SHELL_PROFILE_LOCAL_VAR_FILE}"
        setFlag "${SHELL_PROFILE_FLAG_VARS_LOCAL_LOADED}"

        msgDebug "Debugging enabled\n"
    else
        msgDebug "Local variables already loaded, skipping\n"
    fi
}

cleanUp() {
    if [ "${SHELL_PROFILE_DEF_SCRIPT_FUNCTIONS}" != "${1}" ]; then
        msgDebug "Skipping cleanup call from ${1}\n"

        return 1
    fi

    msgDebug "Cleaning up from ${1}...\n"
    clearFlag "${SHELL_PROFILE_FLAG_VARS_LOCAL_LOADED}"
    cleanUpVars

    msgDebug "Unsetting functions...\n"
    unset -f addPath lc uc getPlatform cleanUp cleanUpVars setFlag clearFlag hasFlag indent resolveLink loadLocalVars addPaths msgDebug
}

msgDebug "script_functions loaded in ${1}\n"
SHELL_PROFILE_DEF_SCRIPT_FUNCTIONS=${1}

#
# Load local shell-profile settings before doing anything
#
loadLocalVars

return 0

# vim: syntax=sh:ts=4:sw=4
